service: forecaster-api

plugins:
  - serverless-python-requirements
custom:
  pythonRequirements:
    dockerizePip: true
  secrets: ${file(../.secrets.yml)}

provider:
  name: aws
  runtime: python3.6
  timeout: 10

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

  iamRoleStatements:
    - Effect: "Allow"

      Action:
        - "dynamodb:*"
      Resource: "*"

# you can define service wide environment variables here
  environment:
    wunderground_api_key: "${self:custom.secrets.wunderground_api_key}"

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  ping:
    handler: handler.ping
    events:
      - http:
          path: ping
          method: get
  test_read:
    handler: handler.test_read
    events:
      - http:
          path: test_read
          method: get
  test_write:
    handler: handler.test_write
    events:
      - http:
          path: test_write
          method: get
  fetch_forecast:
    handler: handler.fetch_forecast
    events:
      - http:
          path: fetch_forecast
          method: post
  test_fetch_forecast:
    handler: handler.test_fetch_forecast
    events:
      - http:
          path: test_fetch_forecast
          method: post

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

resources:
  Resources:
    DynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: forecast-table
        AttributeDefinitions:
          - AttributeName: zip_code
            AttributeType: S
        KeySchema:
          - AttributeName: zip_code
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3
    DynamoDBIamPolicy:
      Type: AWS::IAM::Policy
      DependsOn: DynamoDbTable
      Properties:
        PolicyName: lambda-dynamodb
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
              Resource: arn:aws:dynamodb:*:*:table/forecast-table
        Roles:
          - Ref: IamRoleLambdaExecution
