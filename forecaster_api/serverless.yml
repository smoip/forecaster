service: forecaster-api

plugins:
  - serverless-python-requirements
custom:
  pythonRequirements:
    dockerizePip: true
  secrets: ${file(../.secrets.yml)}

provider:
  name: aws
  apiKeys:
    - forecasterApiKey
  runtime: python3.6
  timeout: 10

# overwrite defaults here
#  stage: dev
#  region: us-east-1

  iamRoleStatements:
    - Effect: "Allow"

      Action:
        - "dynamodb:*"
      Resource: "*"

  environment:
    wunderground_api_key: "${self:custom.secrets.wunderground_api_key}"

# packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  ping:
    handler: handler.ping
    events:
      - http:
          path: ping
          method: get
          private: true
          cors: true
  fetch_forecast:
    handler: handler.fetch_forecast
    events:
      - http:
          path: fetch_forecast
          method: post
          private: true
          cors: true

#    Define function environment variables here
#    environment:
#      variable2: value2

resources:
  Resources:
    DynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: forecast-table
        AttributeDefinitions:
          - AttributeName: zip_code
            AttributeType: S
        KeySchema:
          - AttributeName: zip_code
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3
    DynamoDBIamPolicy:
      Type: AWS::IAM::Policy
      DependsOn: DynamoDbTable
      Properties:
        PolicyName: lambda-dynamodb
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
              Resource: arn:aws:dynamodb:*:*:table/forecast-table
        Roles:
          - Ref: IamRoleLambdaExecution
